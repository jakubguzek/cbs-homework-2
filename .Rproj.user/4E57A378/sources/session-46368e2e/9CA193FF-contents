---
title: "homework"
author: "Jakub Guzek"
date: "2023-03-18"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## Dependancies and setup

Load the dependancies

```{r load_hidden, echo=FALSE, results="hide", warning=FALSE}
suppressPackageStartupMessages({
library(Biobase)
library(RColorBrewer)
library(gplots)
library(data.table)
library(tidyverse)
library(qvalue)
library(ggpubr)
library(irlba)
library(Rtsne)
})
```

Set theme for the plots

```{r}
theme_set(theme_bw())
theme_update(plot.title = element_text(hjust = 0.5))
```

Set the colors
```{r}
colors <- colorRampPalette(c("purple", "white", "orange"))(n = 500)
```

## Initialize the data

As a first step let's download the mouse RNA-seq data.

```{r}
if (file_test("-f", "./bottomly.Rdata")) {
  load(file = "./bottomly.Rdata")
} else {
  con <- url("http://bowtie-bio.sourceforge.net/recount/ExpressionSets/bottomly_eset.RData")
  load(file = con)
  close(con)
  save(bottomly.eset, file = "bottomly.Rdata")
}
```

Initialize the expression data as a matrix
```{r}
expression_data <- as.matrix(exprs(bottomly.eset))
dim(expression_data)
expression_data[1:5, 1:10] # take a look at the data
expression_data <- expression_data[rowMeans(expression_data) > 10, ]
expression_data <- log2(as.matrix(expression_data) + 1)
```

## Problem 1

> *Homework Problem 1:*
> Make one heatmap of the aforementioned Bottomly data with the following options: a) both rows and columns are clustered, b) show a dendrogram only on the columns., and c) scale in the column direction. Send only one heatmap. If you are unsure, check the help document on this function by typing ?heatmap.2


Create a heatmap for homework problem 1

```{r}
png("Guzek_problem1.png", height = 700, width = 700)
heatmap.2(expression_data,
  # Should be clustered both by columns and rows by default
  main = "Guzek_problem1.png",
  notecol = "black",
  density.info = "none",
  trace = "none",
  margin = c(12, 9),
  col = colors,
  dendrogram = "column", # Draw dendrogram only for columns
  scale = "column", # Scale heatmap in the column direction
)
dev.off()
```

## Homework problem 2

> *Homework Problem 2:*
> As shown in the plot above, the projection on the top 2 PCs doesn't show the grouping by the strains. But we have many PCs to explore. Explore different combinations of PCs in scatter plots while coloring the data points by the genetic strains. Find a combination of PCs that separate the strains well. Send only one scatterplot.

Let's start by running SVD on our data

```{r}
svd.out <- svd(t(scale(t(expression_data), scale = FALSE, center = TRUE)))
print(paste("Dimension of left singular vectors:", dim(svd.out$u)))
print(paste("Length of singular values:", length(svd.out$d)))
print(paste("Dimension of right singular vectors:", dim(svd.out$v)))
```

Plot singular value to determine which PCAs are important.

```{r}
par(mfrow = c(1, 2))
plot(svd.out$d, pch = 20, ylab = "Singluar value")
plot(svd.out$d^2 / sum(svd.out$d^2) * 100, pch = 20, ylab = "% variance explained")
```

Let's look at top right vectors.

```{r}
plot(1:ncol(expression_data), svd.out$v[, 1], pch = 20)
```

```{r}
plot(1:ncol(expression_data), svd.out$v[, 2], pch = 20)
```

```{r}
plot(1:ncol(expression_data), svd.out$v[, 3], pch = 20)
```

Let's plot the actual PCA's

```{r}
PC <- data.table(svd.out$v, pData(bottomly.eset))

pdf("Guzek_problem2.pdf", width = 8, height = 5)
# I tried creating those plots in a for loop but it didn't work for some reason
# ggplot(PC) +  geom_point(aes(x=V1, y=V2, col=as.factor(strain)))
# ggplot(PC) +  geom_point(aes(x=V1, y=V3, col=as.factor(strain))) # goodish separation
# ggplot(PC) +  geom_point(aes(x=V1, y=V4, col=as.factor(strain)))
# ggplot(PC) +  geom_point(aes(x=V1, y=V5, col=as.factor(strain)))
# ggplot(PC) +  geom_point(aes(x=V1, y=V6, col=as.factor(strain)))
ggplot(PC) +
  geom_point(aes(x = V2, y = V3, col = as.factor(strain))) +
  scale_color_manual(values = c("orange", "purple")) +
  labs(title = "Guzek_problem2") # best separation
# ggplot(PC) +  geom_point(aes(x=V2, y=V4, col=as.factor(strain)))
# ggplot(PC) +  geom_point(aes(x=V2, y=V5, col=as.factor(strain)))
# ggplot(PC) +  geom_point(aes(x=V2, y=V6, col=as.factor(strain)))
# ggplot(PC) +  geom_point(aes(x=V3, y=V4, col=as.factor(strain)))
# ggplot(PC) +  geom_point(aes(x=V3, y=V5, col=as.factor(strain))) # goodish separation
# ggplot(PC) +  geom_point(aes(x=V3, y=V6, col=as.factor(strain)))
# ggplot(PC) +  geom_point(aes(x=V4, y=V5, col=as.factor(strain)))
# ggplot(PC) +  geom_point(aes(x=V4, y=V6, col=as.factor(strain)))
# ggplot(PC) +  geom_point(aes(x=V5, y=V6, col=as.factor(strain)))
dev.off()
```

## Homework problem 3

> *Homework Problem 3:*
> Make a scatter plot of the top 2 left singular vectors.

Top two left singular vectors.

```{r}
pdf("Guzek_problem3.pdf", width = 16, height = 9)
par(mfrow = c(1, 2))
plot(svd.out$u[, 1], pch = 20)
plot(svd.out$u[, 2], pch = 20)
mtext("Guzek_problem3", side = 3, line = -2, outer = TRUE)
dev.off()
```

## Homework problem 4

> *Homework Problem 4:*
> Make one figure that contains violin plots of the top 5 left singular vectors (loadings). Hint/To-do: Make sure turn the top 5 left singular vectors into a data.table (or a data.frame) and ggplot2 to plot them altogether. Do not send 5 figures!

Violin plots for the top 5 left singular vectors.

```{r}
loadings <- data.table(svd.out$u, pData(bottomly.eset))
png("Guzek_problem4.png", width = 800, height = 500)
V1 <- ggplot(loadings) +
  geom_violin(aes(x = as.factor(strain), y = V1), draw_quantiles = c(0.25, 0.50, 0.75)) +
  xlab("Strain")
V2 <- ggplot(loadings) +
  geom_violin(aes(x = as.factor(strain), y = V2), draw_quantiles = c(0.25, 0.50, 0.75)) +
  xlab("Strain")
V3 <- ggplot(loadings) +
  geom_violin(aes(x = as.factor(strain), y = V3), draw_quantiles = c(0.25, 0.50, 0.75)) +
  xlab("Strain")
V4 <- ggplot(loadings) +
  geom_violin(aes(x = as.factor(strain), y = V4), draw_quantiles = c(0.25, 0.50, 0.75)) +
  xlab("Strain")
V5 <- ggplot(loadings) +
  geom_violin(aes(x = as.factor(strain), y = V5), draw_quantiles = c(0.25, 0.50, 0.75)) +
  xlab("Strain")
figure <- ggarrange(ggarrange(V1, V2, V3, labels = c("V1", "V2", "V3"), ncol = 3, nrow = 1), ggarrange(V4, V5, labels = c("V4", "V5"), ncol = 2, nrow = 1), ncol = 1, nrow = 2) + labs(title="Guzek_problem4")
annotate_figure(figure, top = text_grob("Guzek_problem4"))
dev.off()
```

## Homework problem 5

> *Homework Problem 5:*
> Cluster the genes (rows) using K-means clustering (function `kmeans()`) on the original data, with `k=5` clusters. Then, create a 2-dimensional t-SNE projection (as done previously) while using the 5 clusters to color the data points corresponding to genes.  

Calculate the t-SNE for the expression data.

```{r}
set.seed(1)
tsne_output <- Rtsne(expression_data, pca = FALSE, preplexity = 60)
tsne_output <- data.table(tsne_output$Y)
```

Cluster the data.

```{r}
clusters <- kmeans(expression_data, centers = 5)
```

Plot the t-SNE with highlighted clusters.

```{r}
pdf("Guzek_problem5.pdf", width = 8, height = 5)
tsne_clustered <- data.table(expression_data, tsne_output, keep.rownames = TRUE)
ggplot(tsne_clustered) +
  geom_point(aes(x = V1, y = V2, col = clusters$cluster)) +
  scale_color_distiller(palette = "Spectral") +
  labs(title = ("Guzek_problem5"))
dev.off()
```
